#############################################################################################
## WARNING: AUTO-GENERATED FILE ORIGINATING FROM VALUE.ANALYZERS NUGET PACKAGE. DO NOT EDIT.
## Any changes made to this file will be overwritten.
#############################################################################################

# top-most EditorConfig file
root = true

# Don't use tabs for indentation.
[*]
indent_style = space
# Don't specify an indent_size here; that has too many unintended consequences as it affects all files
spelling_exclusion_path = SpellingExclusions.dic

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
insert_final_newline = true
trim_trailing_whitespace = true

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# Powershell files
[*.ps1]
indent_size = 2

# Shell script files
[*.sh]
end_of_line = lf
indent_size = 2

# Dotnet code style settings:
[*.{cs,vb}]

# Sort System.* using directives alphabetically, and place them before other using directives
dotnet_sort_system_directives_first = true

# Place using directives outside the namespace
csharp_using_directive_placement = outside_namespace:warning

# Do not place a blank line between using directive groups
dotnet_separate_import_directive_groups = false

# Enforce file-scoped namespace declaration style
csharp_style_namespace_declarations = file_scoped:warning

# IDE0049: Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Suggest more modern language features when available
# IDE0028: Use collection initializers
dotnet_style_collection_initializer = true:suggestion

# Nullable 
# IDE0029: Null check can be simplified (ternary conditional check)
# IDE0030: Null check can be simplified (nullable ternary conditional check)
# IDE0270: Null check can be simplified (if null check)
# IDE0031: Use null propagation (Prefer to use null-conditional operator when possible)
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion

# IDE0041: Use 'is null' check
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion

# IDE0037: Use inferred member names
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion

# IDE0045: Use conditional expression for assignment
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion

# IDE0046: Use conditional expression for return
dotnet_style_prefer_conditional_expression_over_return = true:suggestion

# IDE0054,IDE0074: Use compound assignment
dotnet_style_prefer_compound_assignment = true:suggestion

# Whitespace options
dotnet_style_allow_multiple_blank_lines_experimental = false

# Non-private static fields are PascalCase
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols = non_private_static_fields
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style = non_private_static_field_style

dotnet_naming_symbols.non_private_static_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_static_fields.required_modifiers = static

dotnet_naming_style.non_private_static_field_style.capitalization = pascal_case

# Non-private readonly fields are PascalCase
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.symbols = non_private_readonly_fields
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.style = non_private_readonly_field_style

dotnet_naming_symbols.non_private_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_readonly_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_readonly_fields.required_modifiers = readonly

dotnet_naming_style.non_private_readonly_field_style.capitalization = pascal_case

# name all constant fields using PascalCase - standard according to github.com/dotnet/runtime
dotnet_naming_rule.constant_fields_should_be_pascal_case.severity = warning
dotnet_naming_rule.constant_fields_should_be_pascal_case.symbols = constant_fields
dotnet_naming_rule.constant_fields_should_be_pascal_case.style = constant_fields_style
dotnet_naming_symbols.constant_fields.applicable_kinds = field
dotnet_naming_symbols.constant_fields.required_modifiers = const
dotnet_naming_style.constant_fields_style.capitalization = pascal_case

# Static fields are pascalCase
dotnet_naming_rule.static_fields_should_be_camel_case.severity = warning
dotnet_naming_rule.static_fields_should_be_camel_case.symbols = static_fields
dotnet_naming_rule.static_fields_should_be_camel_case.style = static_field_style

dotnet_naming_symbols.static_fields.applicable_kinds = field
dotnet_naming_symbols.static_fields.required_modifiers = static
dotnet_naming_symbols.static_fields.applicable_accessibilities = public, internal, protected_internal

dotnet_naming_style.static_field_style.capitalization = pascal_case

# Private or Protected instance fields are camelCase and start with _
dotnet_naming_rule.instance_fields_should_be_camel_case.severity = warning
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style

dotnet_naming_symbols.instance_fields.applicable_kinds = field
dotnet_naming_symbols.instance_fields.applicable_accessibilities = private, protected

dotnet_naming_style.instance_field_style.capitalization = camel_case
dotnet_naming_style.instance_field_style.required_prefix = _

# Locals and parameters are camelCase
dotnet_naming_rule.locals_should_be_camel_case.severity = warning
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style

dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local

dotnet_naming_style.camel_case_style.capitalization = camel_case

# Local functions are PascalCase
dotnet_naming_rule.local_functions_should_be_pascal_case.severity = warning
dotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascal_case.style = local_function_style

dotnet_naming_symbols.local_functions.applicable_kinds = local_function

dotnet_naming_style.local_function_style.capitalization = pascal_case

# By default, name items with PascalCase
dotnet_naming_rule.members_should_be_pascal_case.severity = warning
dotnet_naming_rule.members_should_be_pascal_case.symbols = all_members
dotnet_naming_rule.members_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.all_members.applicable_kinds = *

dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# IDE0055: Fix formatting (all formatting options)
# Workaround for https://github.com/dotnet/roslyn/issues/70570
dotnet_diagnostic.IDE0055.severity = warning
dotnet_style_operator_placement_when_wrapping = beginning_of_line
tab_width = 4
end_of_line = crlf
dotnet_style_prefer_auto_properties = true:silent

# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = false # In case of few members they should be in same line
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false # When it's a block, indent the statement list and curly braces for a case in a switch statement.
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left # Labels are placed at the leftmost column

# Whitespace options
csharp_style_allow_embedded_statements_on_same_line_experimental = false
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = false
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = false
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = false

# Prefer method-like constructs to have a block body
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_operators = false:none

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion

# Suggest more modern language features when available
csharp_style_conditional_delegate_call = true:suggestion
csharp_style_prefer_extended_property_pattern = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion

# Space preferences
csharp_space_after_cast = true # Add space between the cast and the value
csharp_space_after_colon_in_inheritance_clause = true # Place a space character after the colon for bases or interfaces in a type declaration
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true # Place a space character after a keyword in a control flow statement such as a for loop
csharp_space_after_semicolon_in_for_statement = true # Insert space after each semicolon in a for statement
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false # Remove extra space characters in declaration statements
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Block settings
csharp_preserve_single_line_blocks = true # Leave code block on single line (eg. "{ get; set; }")
csharp_preserve_single_line_statements = false # Leave statements and member declarations on different lines

# Additional rules
csharp_prefer_simple_using_statement = true:suggestion
csharp_style_namespace_declarations = file_scoped:silent
csharp_style_prefer_method_group_conversion = true:silent
csharp_style_prefer_top_level_statements = true:silent
csharp_style_prefer_primary_constructors = true:suggestion
csharp_style_expression_bodied_lambdas = true:silent
csharp_style_expression_bodied_local_functions = false:silent

# IDE0060: Remove unused parameter
dotnet_diagnostic.IDE0060.severity = warning

# IDE0040: Add accessibility modifiers
dotnet_diagnostic.IDE0040.severity = warning

# IDE0052: Remove unread private member
dotnet_diagnostic.IDE0052.severity = warning

# IDE0059: Unnecessary assignment to a value
dotnet_diagnostic.IDE0059.severity = warning

# CA1012: Abstract types should not have public constructors
dotnet_diagnostic.CA1012.severity = warning

# CA1065: Do not raise exceptions in unexpected locations
dotnet_diagnostic.S3877.severity = warning

# CA1822: Make member static
dotnet_diagnostic.CA1822.severity = suggestion

# csharp_style_allow_embedded_statements_on_same_line_experimental
dotnet_diagnostic.IDE2001.severity = warning

# csharp_style_allow_blank_lines_between_consecutive_braces_experimental
dotnet_diagnostic.IDE2002.severity = warning

# csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental
dotnet_diagnostic.IDE2004.severity = warning

# csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental
dotnet_diagnostic.IDE2005.severity = warning

# csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental
dotnet_diagnostic.IDE2006.severity = warning

# IDE0130: Namespace does not match folder structure
dotnet_diagnostic.IDE0130.severity = warning

# IDE0100: Remove unnecessary equality operator
dotnet_diagnostic.IDE0130.severity = suggestion

# IDE0033: Use explicitly provided tuple name
dotnet_diagnostic.IDE0033.severity = suggestion

# IDE0035: Remove unreachable code
dotnet_diagnostic.IDE0035.severity = warning

# IDE0051: Remove unused private member
dotnet_diagnostic.IDE0051.severity = warning

# Disable XML warnings when addressing "CSC: Warning EnableGenerateDocumentationFile"
dotnet_diagnostic.CS1570.severity = none
dotnet_diagnostic.CS1587.severity = none
dotnet_diagnostic.CS1591.severity = none

# ReSharper properties
resharper_keep_existing_arrangement = false
resharper_align_linq_query = true
resharper_align_multiline_argument = true
resharper_align_multiline_extends_list = true
resharper_align_multiline_parameter = true
resharper_align_multiple_declaration = true
resharper_align_multline_type_parameter_constrains = true
resharper_align_multline_type_parameter_list = true
resharper_align_tuple_components = true
resharper_apply_auto_detected_rules = false
resharper_blank_lines_after_control_transfer_statements = 1
resharper_blank_lines_after_multiline_statements = 1
resharper_blank_lines_before_block_statements = 1
resharper_blank_lines_before_control_transfer_statements = 1
resharper_blank_lines_before_multiline_statements = 1
resharper_csharp_keep_blank_lines_in_code = 1
resharper_csharp_keep_blank_lines_in_declarations = 1
resharper_csharp_max_line_length = 140
resharper_csharp_stick_comment = false
resharper_csharp_wrap_multiple_declaration_style = chop_always
resharper_empty_block_style = together_same_line
resharper_keep_existing_declaration_block_arrangement = true
resharper_keep_existing_embedded_block_arrangement = true
resharper_keep_existing_enum_arrangement = true
resharper_keep_existing_initializer_arrangement = false
resharper_max_enum_members_on_line = 5
resharper_max_initializer_elements_on_line = 3
resharper_new_line_before_while = true
resharper_outdent_binary_ops = true
resharper_outdent_commas = true
resharper_place_accessorholder_attribute_on_same_line = false
resharper_place_field_attribute_on_same_line = false
resharper_place_simple_embedded_statement_on_same_line = false
resharper_place_simple_switch_expression_on_single_line = true
resharper_static_members_qualify_with = current_type
resharper_use_indent_from_vs = false
resharper_wrap_chained_method_calls = chop_if_long
resharper_wrap_multiple_type_parameter_constraints_style = chop_always

# Array settings
resharper_align_multiline_array_initializer = true
resharper_wrap_array_initializer_style = chop_if_long

# Arrangement of list patterns
resharper_place_simple_list_pattern_on_single_line = true
resharper_wrap_list_pattern = chop_if_long

# Invocation settings
resharper_wrap_arguments_style = chop_if_long
resharper_wrap_before_invocation_rpar = true
resharper_wrap_after_invocation_lpar = true

# Method signature settings
# resharper_max_formal_parameters_on_line = 3
resharper_wrap_parameters_style = chop_if_long
resharper_wrap_before_declaration_rpar = true
resharper_wrap_after_declaration_lpar = true

# Arrangement of binary expressions
resharper_wrap_before_binary_opsign = false
resharper_wrap_chained_binary_expressions = chop_if_long
resharper_wrap_before_binary_pattern_op = true
resharper_wrap_chained_binary_patterns = chop_if_long
resharper_force_chop_compound_if_expression = false
resharper_force_chop_compound_while_expression = false
resharper_force_chop_compound_do_expression = false

# Arrangement of expression bodied members
resharper_place_expr_method_on_single_line = true
resharper_place_expr_property_on_single_line = true
resharper_wrap_before_arrow_with_expressions = true

# Braces layout
resharper_csharp_empty_block_style = together

# ReSharper inspection severities
resharper_arrange_redundant_parentheses_highlighting = hint
resharper_function_complexity_overflow_highlighting = suggestion
resharper_function_never_returns_highlighting = warning
resharper_inconsistent_naming_highlighting = warning
resharper_localizable_element_highlighting = warning
resharper_parameter_only_used_for_precondition_check_local_highlighting = none
resharper_possible_null_reference_exception_highlighting = suggestion
resharper_redundant_explicit_params_array_creation_highlighting = none
resharper_unused_auto_property_accessor_global_highlighting = suggestion
resharper_unused_auto_property_accessor_local_highlighting = suggestion
resharper_unused_method_return_value_global_highlighting = hint
resharper_unused_method_return_value_local_highlighting = suggestion
resharper_unused_parameter_local_highlighting = hint
resharper_lambda_expression_can_be_made_static_highlighting = suggestion

resharper_arguments_style_anonymous_function_highlighting = none
resharper_arguments_style_literal_highlighting = none
resharper_arguments_style_named_expression_highlighting = none
resharper_arguments_style_other_highlighting = none
resharper_arguments_style_string_literal_highlighting = none
resharper_arrange_attributes_highlighting = warning
resharper_arrange_static_member_qualifier_highlighting = none
resharper_arrange_this_qualifier_highlighting = none
resharper_arrange_type_member_modifiers_highlighting = warning
resharper_arrange_type_modifiers_highlighting = warning
resharper_built_in_type_reference_style_for_member_access_highlighting = suggestion
resharper_compare_non_constrained_generic_with_null_highlighting = suggestion
resharper_convert_to_using_declaration_highlighting = none
resharper_empty_general_catch_clause_highlighting = warning
resharper_enforce_fixed_statement_braces_highlighting = warning
resharper_enforce_foreach_statement_braces_highlighting = warning
resharper_enforce_for_statement_braces_highlighting = warning
resharper_enforce_if_statement_braces_highlighting = warning
resharper_enforce_lock_statement_braces_highlighting = warning
resharper_enforce_using_statement_braces_highlighting = warning
resharper_enforce_while_statement_braces_highlighting = warning
resharper_function_complexity_overflow_highlighting = suggestion
resharper_function_never_returns_highlighting = error
resharper_localizable_element_highlighting = error
resharper_parameter_only_used_for_precondition_check_local_highlighting = none
resharper_possible_null_reference_exception_highlighting = suggestion
resharper_redundant_explicit_params_array_creation_highlighting = suggestion
resharper_suggest_var_or_type_elsewhere_highlighting = warning
resharper_suggest_var_or_type_built_in_types_highlighting = warning
resharper_suggest_var_or_type_deconstruction_declarations_highlighting = warning
resharper_suggest_var_or_type_simple_types_highlighting = warning
resharper_unused_auto_property_accessor_global_highlighting = suggestion
resharper_unused_auto_property_accessor_local_highlighting = suggestion
resharper_unused_method_return_value_global_highlighting = suggestion
resharper_unused_method_return_value_local_highlighting = suggestion
resharper_unused_parameter_local_highlighting = suggestion

# Linting rules

## Microsoft.CodeAnalysis.NetAnalyzers
## NOTE: We need the severity entry due to https://github.com/dotnet/roslyn/issues/44201

## Code-Quality - Maintainability

### Avoid excessive inheritance
dotnet_diagnostic.CA1501.severity = warning

### Avoid excessive complexity
dotnet_diagnostic.CA1502.severity = none # Not required - cognitive complexity is being used by sonar rule S3776

### Avoid unmaintainable code
dotnet_diagnostic.CA1505.severity = warning

### Avoid excessive class coupling
dotnet_diagnostic.CA1506.severity = none # Too many cases in which this unavoidable

### Use nameof in place of string
dotnet_diagnostic.CA1507.severity = warning

### Avoid dead conditional code
dotnet_diagnostic.CA1508.severity = warning

### Invalid entry in code metrics configuration file
dotnet_diagnostic.CA1509.severity = none # Code metrics are not being used

### Use ArgumentNullException throw helper
dotnet_diagnostic.CA1510.severity = warning

### Use ArgumentException throw helper
dotnet_diagnostic.CA1511.severity = warning

### Use ArgumentOutOfRangeException throw helper
dotnet_diagnostic.CA1512.severity = warning

### Use ObjectDisposedException throw helper
dotnet_diagnostic.CA1513.severity = warning

### Avoid redundant length argument
dotnet_diagnostic.CA1514.severity = warning

### Consider making public types internal
dotnet_diagnostic.CA1515.severity = none # Blindly implementing rule suggestion might lead to bugs

## Code Style - Language and unnecessary code

### Simplify name
dotnet_diagnostic.IDE0001.severity = warning

### Simplify member access 
dotnet_diagnostic.IDE0002.severity = warning

### Remove this or Me qualification
dotnet_diagnostic.IDE0003.severity = warning
dotnet_style_qualification_for_field = false
dotnet_style_qualification_for_property = false
dotnet_style_qualification_for_method = false
dotnet_style_qualification_for_event = false

### Remove unnecessary cast
dotnet_diagnostic.IDE0004.severity = warning

### Remove unnecessary using directives
dotnet_diagnostic.IDE0005.severity = warning

### Use var instead of explicit type
dotnet_diagnostic.IDE0007.severity = warning
csharp_style_var_for_built_in_types = true
csharp_style_var_when_type_is_apparent = true
csharp_style_var_elsewhere = true

### Use explicit type instead of var
dotnet_diagnostic.IDE0008.severity = none # var is used - see IDE0007

### Add this or Me qualification
dotnet_diagnostic.IDE0009.severity = none # qualification should not be applied as defined with IDE003

### Add missing cases to switch statement
dotnet_diagnostic.IDE0010.severity = warning

### Add braces
dotnet_diagnostic.IDE0011.severity = warning
csharp_prefer_braces = true

### Use throw expression
dotnet_diagnostic.IDE0016.severity = warning
csharp_style_throw_expression = true

### Use object initializer
dotnet_diagnostic.IDE0017.severity = warning
dotnet_style_object_initializer = true

### Inline variable declaration
dotnet_diagnostic.IDE0018.severity = warning
csharp_style_inlined_variable_declaration = true

### Use pattern matching to avoid 'as' followed by a 'null' check
dotnet_diagnostic.IDE0019.severity = warning
csharp_style_pattern_matching_over_as_with_null_check = true

### Use pattern matching to avoid 'is' check followed by a cast 
dotnet_diagnostic.IDE0020.severity = warning
dotnet_diagnostic.IDE0038.severity = warning
csharp_style_pattern_matching_over_is_with_cast_check = true

### Use expression body for constructors
dotnet_diagnostic.IDE0021.severity = warning
csharp_style_expression_bodied_constructors = false

### Use collection expression for array
dotnet_diagnostic.IDE0300.severity = suggestion
dotnet_style_prefer_collection_expression = true

## SonarAnalyzer.CSharp - Use default quality profile "Sonar way" and only disable unwanted rules
dotnet_diagnostic.S109.severity = none # Too many false positives - should be decided during code review
dotnet_diagnostic.S113.severity = none # We don't need a newline at the end of every file.
dotnet_diagnostic.S1121.severity = none # Too many false positives
dotnet_diagnostic.S1133.severity = none # Removing obsolete code cannot be enforced due to backwards compatibility

# Classes should not be coupled to too many other classes
dotnet_diagnostic.S1200.severity = none # For complex components sometimes unavoidable

# String literals should not be duplicated
dotnet_diagnostic.S3240.severity = suggestion # Too many false positives

dotnet_diagnostic.S1227.severity = none # Usage of break is acceptable in some cases (overall complexity is relevant)
dotnet_diagnostic.S1312.severity = none
dotnet_diagnostic.S1309.severity = none # Allow ignoring of warnings for specific files
dotnet_diagnostic.S1451.severity = none # We don't need file license headers
dotnet_diagnostic.S1541.severity = none # Cognitive complexity is more meaningful - Cyclomatic complexity not required
dotnet_diagnostic.S1694.severity = none
dotnet_diagnostic.S2221.severity = none # Should be decided during code review
dotnet_diagnostic.S2339.severity = none # constants don't need to be static
dotnet_diagnostic.S2360.severity = none # problems with optional CancellationToken param
dotnet_diagnostic.S2755.severity = none
dotnet_diagnostic.S2857.severity = none # Too many false positives that actually introduce bugs when addressing them
dotnet_diagnostic.S3059.severity = none

# The simplest possible condition syntax should be used
dotnet_diagnostic.S3240.severity = none # Usage of ternary operator should not be enforced
dotnet_diagnostic.S3242.severity = none
dotnet_diagnostic.S3257.severity = none # handled by ReSharper
dotnet_diagnostic.S3267.severity = none # performance implications with general usage of LINQ
dotnet_diagnostic.S3878.severity = none # Unnecessary warning considering new initializer using []
dotnet_diagnostic.S3900.severity = none # No need to validate every parameter of a public method against null
dotnet_diagnostic.S3956.severity = none # Potential development effort outweighs benefit
dotnet_diagnostic.S3994.severity = none # Enforcement of URI usage is not necessary
dotnet_diagnostic.S3995.severity = none # Enforcement of URI usage is not necessary
dotnet_diagnostic.S3996.severity = none # Enforcement of URI usage is not necessary
dotnet_diagnostic.S4005.severity = none # Severity not high enough to justify warning
dotnet_diagnostic.S4017.severity = none
dotnet_diagnostic.S4018.severity = none # Rule not an issue that requires fixing
dotnet_diagnostic.S4023.severity = none
dotnet_diagnostic.S4055.severity = none # we don't need localized strings since we operate in a singular locale
dotnet_diagnostic.S4056.severity = none # we don't need to pass the culture/formatProvider since we only use one locale


# Overloads with a "StringComparison" parameter should be used
dotnet_diagnostic.S4058.severity = suggestion # Blindly following this rule might break the application when using entity framework

dotnet_diagnostic.S4261.severity = none # Hinting and IDE already shows if async or not
dotnet_diagnostic.S6354.severity = none # tests should not dictate business code + mocking can be used

# "ExcludeFromCodeCoverage" attributes should include a justification
dotnet_diagnostic.S6513.severity = none # Should be decided during code review - usually has same copy-pasted reason

dotnet_diagnostic.S6562.severity = none # we operate in a certain timezone (not utc)
dotnet_diagnostic.S6563.severity = none # we operate in a certain timezone (not utc)
dotnet_diagnostic.S6566.severity = none # we cant use DateTimeOffset
dotnet_diagnostic.S6580.severity = none # we operate in a certain timezone (not utc)
dotnet_diagnostic.S6585.severity = none # we only use one locale and therefore fixed date/time formats


# "Find" method should be used instead of the "FirstOrDefault" extension
dotnet_diagnostic.S6602.severity = suggestion # Blindly following this rule might break the application when using entity framework

# Collection-specific "Exists" method should be used instead of the "Any" extension
dotnet_diagnostic.S6605.severity = suggestion # Blindly following this rule might break the application when using entity framework

# Prefer indexing instead of "Enumerable" methods on types implementing "IList"
dotnet_diagnostic.S6608.severity = suggestion # Blindly following this rule might break the application when using entity framework  

dotnet_diagnostic.S6664.severity = none

# The value type properties of a model class should be nullable or marked as "Required" to avoid under-posting.
dotnet_diagnostic.S6964.severity = none # required field can only be verified by using the model state validation

# ModelState.IsValid should be called in controller actions
dotnet_diagnostic.S6967.severity = none # model states are implicit construct -> implicit logic should be avoided
